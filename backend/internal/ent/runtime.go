// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/DanielTitkov/cryptgame/internal/ent/challenge"
	"github.com/DanielTitkov/cryptgame/internal/ent/schema"
	"github.com/DanielTitkov/cryptgame/internal/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	challengeMixin := schema.Challenge{}.Mixin()
	challengeMixinFields0 := challengeMixin[0].Fields()
	_ = challengeMixinFields0
	challengeFields := schema.Challenge{}.Fields()
	_ = challengeFields
	// challengeDescCreateTime is the schema descriptor for create_time field.
	challengeDescCreateTime := challengeMixinFields0[0].Descriptor()
	// challenge.DefaultCreateTime holds the default value on creation for the create_time field.
	challenge.DefaultCreateTime = challengeDescCreateTime.Default.(func() time.Time)
	// challengeDescUpdateTime is the schema descriptor for update_time field.
	challengeDescUpdateTime := challengeMixinFields0[1].Descriptor()
	// challenge.DefaultUpdateTime holds the default value on creation for the update_time field.
	challenge.DefaultUpdateTime = challengeDescUpdateTime.Default.(func() time.Time)
	// challenge.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	challenge.UpdateDefaultUpdateTime = challengeDescUpdateTime.UpdateDefault.(func() time.Time)
	// challengeDescChallenge is the schema descriptor for challenge field.
	challengeDescChallenge := challengeFields[1].Descriptor()
	// challenge.ChallengeValidator is a validator for the "challenge" field. It is called by the builders before save.
	challenge.ChallengeValidator = challengeDescChallenge.Validators[0].(func(string) error)
	// challengeDescText is the schema descriptor for text field.
	challengeDescText := challengeFields[2].Descriptor()
	// challenge.TextValidator is a validator for the "text" field. It is called by the builders before save.
	challenge.TextValidator = challengeDescText.Validators[0].(func(string) error)
	// challengeDescKey is the schema descriptor for key field.
	challengeDescKey := challengeFields[3].Descriptor()
	// challenge.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	challenge.KeyValidator = challengeDescKey.Validators[0].(func(string) error)
	// challengeDescAuthor is the schema descriptor for author field.
	challengeDescAuthor := challengeFields[4].Descriptor()
	// challenge.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	challenge.AuthorValidator = challengeDescAuthor.Validators[0].(func(string) error)
	// challengeDescID is the schema descriptor for id field.
	challengeDescID := challengeFields[0].Descriptor()
	// challenge.DefaultID holds the default value on creation for the id field.
	challenge.DefaultID = challengeDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescIPAddress is the schema descriptor for ip_address field.
	userDescIPAddress := userFields[1].Descriptor()
	// user.IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	user.IPAddressValidator = userDescIPAddress.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
