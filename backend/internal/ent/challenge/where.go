// Code generated by ent, DO NOT EDIT.

package challenge

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/cryptgame/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldUpdateTime, v))
}

// Challenge applies equality check predicate on the "challenge" field. It's identical to ChallengeEQ.
func Challenge(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldChallenge, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldText, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldKey, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldAuthor, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldUpdateTime, v))
}

// ChallengeEQ applies the EQ predicate on the "challenge" field.
func ChallengeEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldChallenge, v))
}

// ChallengeNEQ applies the NEQ predicate on the "challenge" field.
func ChallengeNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldChallenge, v))
}

// ChallengeIn applies the In predicate on the "challenge" field.
func ChallengeIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldChallenge, vs...))
}

// ChallengeNotIn applies the NotIn predicate on the "challenge" field.
func ChallengeNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldChallenge, vs...))
}

// ChallengeGT applies the GT predicate on the "challenge" field.
func ChallengeGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldChallenge, v))
}

// ChallengeGTE applies the GTE predicate on the "challenge" field.
func ChallengeGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldChallenge, v))
}

// ChallengeLT applies the LT predicate on the "challenge" field.
func ChallengeLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldChallenge, v))
}

// ChallengeLTE applies the LTE predicate on the "challenge" field.
func ChallengeLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldChallenge, v))
}

// ChallengeContains applies the Contains predicate on the "challenge" field.
func ChallengeContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldChallenge, v))
}

// ChallengeHasPrefix applies the HasPrefix predicate on the "challenge" field.
func ChallengeHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldChallenge, v))
}

// ChallengeHasSuffix applies the HasSuffix predicate on the "challenge" field.
func ChallengeHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldChallenge, v))
}

// ChallengeEqualFold applies the EqualFold predicate on the "challenge" field.
func ChallengeEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldChallenge, v))
}

// ChallengeContainsFold applies the ContainsFold predicate on the "challenge" field.
func ChallengeContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldChallenge, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldText, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldKey, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldAuthor, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldType, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(func(s *sql.Selector) {
		p(s.Not())
	})
}
